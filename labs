/*
	Programmer: Gus Ballman
	Class: CptS 121; Lab Section 07
	Date: 4/2/2025
*/

#ifndef HEADER_H
#define HEADER_H

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>

typedef struct employee
{
	char name[100]; // employee's name - last, first
	char title; // title 'B' or 'M'
	double hours_worked; // total number of hours worked
	double payrate; // pay rate per hour
	double payment; // total payment for the pay period â€“ you will compute!
} Employee;

int collect_data(FILE* input_stream, Employee employee_data[200]);
void compute_overtime(Employee employee_data[200], int number_of_employees, double overtime[200]);
void determine_payment(Employee employee_data[200], int number_of_employees, double overtime[200]);
double total_payroll(Employee employee_data[200], int number_of_employees);
double max_payment(Employee employee_data[200], int number_of_employees);
double min_payment(Employee employee_data[200], int number_of_employees, double max);


#endif
/*
	Programmer: Gus Ballman
	Class: CptS 121; Lab Section 07
	Date: 4/2/2025
*/

#include "Header.h"

int collect_data(FILE* input_stream, Employee employee_data[200])
{
	int count = 0;
	char temp[100] = "", space[1] = " ";
	while (!feof(input_stream))
	{
		fscanf(input_stream, "%s", employee_data[count].name);
		strcat(employee_data[count].name, space);
		fscanf(input_stream, "%s", temp);
		strcat(employee_data[count].name, temp);
		fscanf(input_stream, " %c", &employee_data[count].title);
		fscanf(input_stream, "%lf", &employee_data[count].hours_worked);
		fscanf(input_stream, "%lf", &employee_data[count].payrate);
		count++;
	}
	return count;
}

void compute_overtime(Employee employee_data[200], int number_of_employees, double overtime[200])
{
	for (int i = 0; i < number_of_employees; i++)
	{
		overtime[i] = employee_data[i].hours_worked - 80.0;
	}
}

void determine_payment(Employee employee_data[200], int number_of_employees, double overtime[200])
{
	for (int i = 0; i < number_of_employees; i++)
	{
		if (employee_data[i].title == 'B')
		{
			employee_data[i].payment = ((employee_data[i].hours_worked - overtime[i]) * employee_data[i].payrate) + ((1.5 * employee_data[i].payrate) * overtime[i]);
		}
		else if (employee_data[i].title == 'M')
		{
			employee_data[i].payment = ((employee_data[i].hours_worked - overtime[i]) * employee_data[i].payrate) + ((1.8 * employee_data[i].payrate) * overtime[i]);
		}
	}

}

double total_payroll(Employee employee_data[200], int number_of_employees)
{
	double total_payroll = 0;
	for (int i = 0; i < number_of_employees; i++)
	{
		total_payroll += employee_data[i].payment;
	}
	return total_payroll;
}

double max_payment(Employee employee_data[200], int number_of_employees)
{
	double max = employee_data[0].payment;
	for (int i = 1; i < number_of_employees; i++)
	{
		if (employee_data[i].payment > max)
		{
			max = employee_data[i].payment;
		}
	}
	return max;
}

double min_payment(Employee employee_data[200], int number_of_employees, double max)
{
	double min = max;
	for (int i = 0; i < number_of_employees; i++)
	{
		if (employee_data[i].payment < min)
		{
			min = employee_data[i].payment;
		}
	}
	return min;

}
/*
	Programmer: Gus Ballman
	Class: CptS 121; Lab Section 07
	Date: 4/2/2025
*/

#include "Header.h"

int main(void)
{
	Employee employee_data[200];
	int number_of_employees = 0;
	double overtime[200], total_payroll_var = 0.0, average_payment = 0.0, max_payment_var = 0.0, min_payment_var = 0.0;
	FILE* input_stream = fopen("payroll.txt", "r");

	number_of_employees = collect_data(input_stream, employee_data);

	fclose(input_stream);

	compute_overtime(employee_data, number_of_employees, overtime);
	determine_payment(employee_data, number_of_employees, overtime);
	total_payroll_var = total_payroll(employee_data, number_of_employees);
	average_payment = total_payroll_var / (double)number_of_employees;
	max_payment_var = max_payment(employee_data, number_of_employees);
	min_payment_var = min_payment(employee_data, number_of_employees, max_payment_var);

	FILE* output_stream = fopen("paid.txt", "w");
	fprintf(output_stream, "Total: $%.2lf.\n", total_payroll_var);
	fprintf(output_stream, "Average: $%.2lf.\n", average_payment);
	fprintf(output_stream, "Max: $%.2lf.\n", max_payment_var);
	fprintf(output_stream, "Min: $%.2lf.\n", min_payment_var);

	fclose(output_stream);



	return 0;

}
Total: $8471.97.
Average: $2117.99.
Max: $3828.80.
Min: $1040.34.
Smith, Susan
B
80.0
17.76
Sanders, Fred
M
87.25
23.45
Kerr, Heidi
M
80.0
47.86
Russo, Rick
B
83.75
12.15/*
  Programmer: Gus Ballman
  Class: CptS 121; Lab Section: 07
  Date: 4/9/2025
*/

#ifndef HEADER_H
#define HEADER_H

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>

void reverse_string(char string[], int start, int end);
int sum_digits(int num, int sum);
void find_path(char maze[8][8], int start_row, int start_col);


#endif
/*
  Programmer: Gus Ballman
  Class: CptS 121; Lab Section: 07
  Date: 4/9/2025
*/

#include "Header.h"

void reverse_string(char string[], int start, int end)
{
	char temp;
	if (start > end )
	{
		return;
	}
	else
	{
		temp = string[start];
		string[start] = string[end];
		string[end] = temp;
		reverse_string(string, start + 1, end - 1);
	}
}

int sum_digits(int num, int sum)
{
	int digit = 0;

	digit = num % 10;

	if (num <= digit)
	{
		return;
	}
	else
	{
		sum += sum_digits(num / 10, sum) + digit;
	}
	return sum;
}

void find_path(char maze[8][8], int start_row, int start_col)
{
	int left = 0, right = 0, up = 0, down = 0, direction = 0, valid = 0;

	if (maze[start_row + 1][start_col] != 'X')
	{
		down = 1;
	}
	if (maze[start_row - 1][start_col] != 'X')
	{
		up = 1;
	}
	if (maze[start_row][start_col + 1] != 'X')
	{
		right = 1;
	}
	if (maze[start_row][start_col - 1] != 'X')
	{
		left = 1;
	}

	if (start_row == 7 && start_col == 7)
	{
		return;
	}
	else
	{
		while (valid != 1)
		{
			direction = (rand() % 4) + 1;
			if (right == 1 && direction == 1 && start_col + 1 < 8)
			{
				valid = 1;
				printf("Location: (%d,%d)\n", start_row, start_col + 1);
				find_path(maze, start_row, start_col + 1);
			}
			else if (left == 1 && direction == 2 && start_col - 1 > 0)
			{
				valid = 1;
				printf("Location: (%d,%d)\n", start_row, start_col - 1);
				find_path(maze, start_row, start_col - 1);
			}
			else if (up == 1 && direction == 3 && start_row - 1 > 0)
			{
				valid = 1;
				printf("Location: (%d,%d)\n", start_row - 1, start_col);
				find_path(maze, start_row - 1, start_col);
			}
			else if (down == 1 && direction == 4 && start_row + 1 < 8)
			{
				valid = 1;
				printf("Location: (%d,%d)\n", start_row + 1, start_col);
				find_path(maze, start_row + 1, start_col);
			}
			else if (down == 0 && left == 0 && right == 0 && up == 0)
			{
				printf("No Possible Path\n");
				return;
			}
		}
	}
	
}

/*
  Programmer: Gus Ballman
  Class: CptS 121; Lab Section: 07
  Date: 4/9/2025
*/

#include "Header.h"

int main(void)
{
	srand((unsigned int)time(NULL));
	char string[10] = "Cpts 121";

	// Task One:
	reverse_string(string, 0, strlen(string) - 1);
	printf("%s\n", string);

	// Task Two:
	int sum = 0, number = 0;

	printf("Enter Number: ");
	scanf("%d", &number);

	sum = sum_digits(number, sum);
	printf("%d\n", sum);

	// Task Three:
	char maze[8][8] = { "X  X XX",
						"X XX X ",
						"X     X",
						"X XXX  ",
						"    X  ",
						"X X X X",
						"  X   X",
						"XXXXX  " };

	find_path(maze, 0, 1);
	return 0;

}
/*
	Programmer: Gus Ballman
	Class: CptS 121; Lab section 07
	Date: 1/29/2025
*/

#ifndef LAB_2
#define LAB_2

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <math.h>

double get_weight(void);
double get_height(void);
double convert_ft_in(double);
double calc_bmi(double, double);
void display_bmi(double);
double enter_theta(void);
double enter_distance(void);
double enter_velocity(void);
double calc_time(double, double, double);
double calc_height(double, double, double, double);
double get_score(int);
double calc_average(int, double, double);
double calc_grade(double, double, double);

#define G 32.17



#endif

#include "Lab2.h"

//Task 1 Functions:
double get_weight(void)
{
	double weight = 0.0;
	printf("Enter your weight in pounds: ");
	scanf("%lf", &weight);

	return weight;
}

double get_height(void)
{
	double height_ft = 0.0;
	printf("Enter your height in feet: ");
	scanf("%lf", &height_ft);

	return height_ft;
}

double convert_ft_in(double height_ft)
{
	double height_in = 0.0;
	height_in = (height_ft * 12);

	return height_in;
}

double calc_bmi(double weight, double height_in)
{
	double bmi = 0.0;
	bmi = (weight / pow(height_in, 2)) * 703;

	return bmi;
}

void display_bmi(double bmi)
{
	printf("Your BMI is: %.1lf\n", bmi);

	return 0;
}

//Task 2 Functions:
double enter_theta(void)
{
	double theta = 0.0;
	printf("Enter the value of angle theta in radians: ");
	scanf("%lf", &theta);

	return theta;
}

double enter_distance(void)
{
	double distance = 0.0;
	printf("Enter the distance from the target in feet: ");
	scanf("%lf", &distance);

	return distance;
}

double enter_velocity(void)
{
	double velocity = 0.0;
	printf("Enter the inital velocity of the target in ft/sec: ");
	scanf("%lf", &velocity);

	return velocity;
}

double calc_time(double theta, double distance, double velocity)
{
	return (distance) / (velocity * cos(theta));
}

double calc_height(double theta, double distance, double velocity, double time)
{
	return (velocity * sin(theta) * time) - ((G * pow(time, 2)) / 2);
}

//Task 3 Functions:
double get_score(int score_num)
{
	double score = 0.0;
	printf("Enter score number %d: ", score_num);
	scanf("%lf", &score);

	return score;
}

double calc_average(int score_type, double score_1, double score_2) //A score type of 1 designates an exam, a score type of 2 designates a lab, and a score type of 3 designates a project.
{
	if (score_type == 1)
	{
		return ((score_1 * .3) + (score_2 * .3));
	}
	else if (score_type == 2)
	{
		return ((score_1 * .05) + (score_2 * .05));
	}
	else //Score type of 3
	{
		return ((score_1 * .15) + (score_2 * .15));
	}
}

double calc_grade(double per1, double per2, double per3)
{
	return (per1 + per2 + per3);
}#include "Lab2.h"

int main(void)
{
	//Task 1:
	double weight = 0.0, height_in = 0.0, bmi = 0.0, height_bmi = 0.0;

	weight = get_weight();
	height_bmi = get_height();

	height_in = convert_ft_in(height_bmi);

	bmi = calc_bmi(weight, height_in);

	display_bmi(bmi);

	//Task 2:
	double theta = 0.0, distance = 0.0, velocity = 0.0, time = 0.0, height = 0.0;

	theta = enter_theta();
	distance = enter_distance();
	velocity = enter_velocity();
	time = calc_time(theta, distance, velocity);
	height = calc_height(theta, distance, velocity, time);

	printf("The height of the projectile is: %.2lf ft\n", height);

	//Task 3:
	double score1 = 0.0, score2 = 0.0, score3 = 0.0, score4 = 0.0, score5 = 0.0, score6 = 0.0, p1 = 0.0, p2 = 0.0, p3 = 0.0, grade = 0.0;

	score1 = get_score(1); //exam 1 score
	score2 = get_score(2); //exam 2 score
	score3 = get_score(3); //lab 1 score
	score4 = get_score(4); //lab 2 score
	score5 = get_score(5); //project 1 score
	score6 = get_score(6); //project 2 score

	p1 = calc_average(1, score1, score2); //exam percentage
	p2 = calc_average(2, score3, score4); //lab percentage
	p3 = calc_average(3, score5, score6); //project percentage

	grade = calc_grade(p1, p2, p3);

	printf("The percentage in the class is %.2lf\n%", grade);
	return 0;
}

/*
	Programmer: Gus Ballman
	Class: CptS 121; Lab Section 07
*/

#ifndef LAB4_H
#define LAB4_H

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <math.h>

double convert_ft_in(double height_ft);
double read_double(FILE* infile);
int read_integer(FILE* infile);
char read_character(FILE* infile);
double calculate_bmr(double weight, double height, int age, char gender);
double calculate_calorie_intake(double bmr, char activity_level);
void print_double_calorie(FILE* outfile, double number);
double calculate_bonus(char all_star, char reg_mvp, char world_series_mvp, char gold_glove, char silver_slugger, char home_run_champ, char batting_average_champ);
void print_double_bonus(FILE* outfile, double number);
double find_max(double number1, double number2, double number3, double number4, double number5);
void print_double_max(FILE* outfile, double number);

#endif/*
	Programmer: Gus Ballman
	Class: CptS 121; Lab Section 07
*/

#include "Lab4.h"

double convert_ft_in(double height_ft)
{
	return (height_ft * 12);
}

double read_double(FILE* infile)
{
	double id = 0.0;
	fscanf(infile, "%lf", &id);
	return id;
}

int read_integer(FILE* infile)
{
	int a = 0;
	fscanf(infile, "%d", &a);
	return a;
}

char read_character(FILE* infile)
{
	char b = '\0';
	fscanf(infile, " %c", &b);
	return b;
}

double calculate_bmr(double weight, double height, int age, char gender)
{
	if (gender == 'F')
	{
		return (655 + (4.35 * weight) + (4.7 * height) - (4.7 * age));
	}
	else
	{
		return (66 + (6.23 * weight) + (12.7 * height) - (6.8 * age));
	}
}
double calculate_calorie_intake(double bmr, char activity_level)
{
	if (activity_level == 'S')
	{
		return (bmr * 1.2);
	}
	else if (activity_level == 'L')
	{
		return (bmr * 1.375);
	}
	else if (activity_level == 'M')
	{
		return (bmr * 1.55);
	}
	else if (activity_level == 'H')
	{
		return (bmr * 1.725);
	}
	else if (activity_level == 'E')
	{
		return (bmr * 1.9);
	}
}

void print_double_calorie(FILE* outfile, double number)
{
	fprintf(outfile, "Daily calorie intake is %.2lf calories.\n", number);
}

double calculate_bonus(char all_star, char reg_mvp, char world_series_mvp, char gold_glove, char silver_slugger, char home_run_champ, char batting_average_champ)
{
	double bonus = 0.0;
	if (all_star == 'y')
	{
		bonus = bonus + 25000;
	}
	if (reg_mvp == 'y')
	{
		bonus = bonus + 75000;
	}
	if (world_series_mvp == 'y')
	{
		bonus = bonus + 100000;
	}
	if (gold_glove == 'y')
	{
		bonus = bonus + 50000;
	}
	if (silver_slugger == 'y')
	{
		bonus = bonus + 35000;
	}
	if (home_run_champ == 'y')
	{
		bonus = bonus + 25000;
	}
	if (batting_average_champ == 'y')
	{
		bonus = bonus + 25000;
	}
	return bonus;
}

void print_double_bonus(FILE* outfile, double number)
{
	fprintf(outfile, "The player's bonus is $%.2lf.\n", number);
}

double find_max(double number1, double number2, double number3, double number4, double number5)
{
	double max_score = number1;
	if (number2 > max_score)
	{
		max_score = number2;
	}
	if (number3 > max_score)
	{
		max_score = number3;
	}
	if (number4 > max_score)
	{
		max_score = number4;
	}
	if (number5 > max_score)
	{
		max_score = number5;
	}
	return max_score;
}

void print_double_max(FILE* outfile, double number)
{
	fprintf(outfile, "The maximum value is %.2lf.\n", number);
}/*
	Programmer: Gus Ballman
	Class: CptS 121; Lab Section 07
*/

#include "Lab4.h"

int main(void)
{
	//Task 1:
	double weight = 0.0, height_ft = 0.0, height_in = 0.0, bmr = 0.0, calories = 0.0;
	int age = 0;
	char gender = '\0', activity = '\0';
	FILE* input_stream = NULL, * output_stream = NULL;

	input_stream = fopen("inputs.txt", "r");

	age = read_integer(input_stream);
	gender = read_character(input_stream);
	weight = read_double(input_stream);
	height_ft = read_double(input_stream);
	activity = read_character(input_stream);

	height_in = convert_ft_in(height_ft);

	bmr = calculate_bmr(weight, height_in, age, gender);
	calories = calculate_calorie_intake(bmr, activity);

	output_stream = fopen("output.txt", "w");
	print_double_calorie(output_stream, calories);

	//task 2:
	double bonus = 0.0, number1 = 0.0, number2 = 0.0, number3 = 0.0, number4 = 0.0, number5 = 0.0, max_value = 0.0;
	char asg = '\0', rmvp = '\0', wsmvp = '\0', gga = '\0', ssa = '\0', hrc = '\0', bac = '\0';

	printf("Did the player make an All-Star Game appearance? (Enter y for yes, and n for NO) ");
	scanf(" %c", &asg);

	printf("Was the player the regualar season MVP? \n");
	scanf(" %c", &rmvp);

	printf("Was the player the World Series MVP? \n");
	scanf(" %c", &wsmvp);

	printf("Did the player earn the Gold Glove award? \n");
	scanf(" %c", &gga);

	printf("Did the player earn the Silver Slugger award? \n");
	scanf(" %c", &ssa);

	printf("Was the player the Home Run Champ? \n");
	scanf(" %c", &hrc);

	printf("Was the player the batting average champ? \n");
	scanf(" %c", &bac);

	bonus = calculate_bonus(asg, rmvp, wsmvp, gga, ssa, hrc, bac);

	print_double_bonus(output_stream, bonus);
	
	number1 = read_double(input_stream);
	number2 = read_double(input_stream);
	number3 = read_double(input_stream);
	number4 = read_double(input_stream);
	number5 = read_double(input_stream);

	max_value = find_max(number1, number2, number3, number4, number5);

	fclose(input_stream);

	print_double_max(output_stream, max_value);

	fclose(output_stream);
	return 0;
}/*
	Programmer: Gus Ballman
	Class: cptS 121; Lab Section 07
	Lab 05
*/

#ifndef LAB5_H
#define LAB5_H

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <math.h>

double read_calculate_sum(FILE* infile);
double determine_tax_bracket(double sum);
double read_calculate_average(FILE* infile);
int greatest_common_divisor(int number1, int number2);
double determine_max(FILE* infile);
double determine_min(FILE* infile);

#endif/*
	Programmer: Gus Ballman
	Class: cptS 121; Lab Section 07
	Lab 05
*/

#include "Lab5.h"

double read_calculate_sum(FILE* infile)
{
	double sum = 0.0, a = 0.0;
	while (!feof(infile))
	{
		fscanf(infile, "%lf", &a);
		sum = sum + a;
	}
	return sum;
}

double determine_tax_bracket(double sum)
{
	char income_level = '\0';

	if (sum < 15000)
	{
		income_level = 'l';
		return income_level;
	}
	else if (sum < 200000)
	{
		income_level = 'm';
		return income_level;
	}
	else
	{
		income_level = 'h';
		return income_level;
	}
}

double read_calculate_average(FILE *infile)
{
	double b = 0.0, sum = 0.0;
	int num = 0;

	while (!feof(infile))
	{
		fscanf(infile, "%lf", &b);
		sum = sum + b;
		num++;
	}
	return (sum / num);
}

int greatest_common_divisor(int number1, int number2)
{
	int num1 = abs(number1), num2 = abs(number2);
	int gcd = 0, r1 = num1 % num2, r2 = 0, r3 = 0;

	if (r1 == 0)
	{
		gcd = num2;
		return gcd;
	}

	else
	{
		r2 = num2 % r1;
		if (r2 == 0)
		{
			gcd = r1;
			return gcd;
		}
		while (r2 != 0)
		{
			r3 = r1 % r2;
			r1 = r2 % r3;
			r2 = r3 % r1;
		}
		gcd = r1;
	}
	return gcd;
}

double determine_max(FILE* infile)
{
	double a = 0.0, max = 0.0;
	while (!feof(infile))
	{
		fscanf(infile, "%lf", &a);
		if (a > max)
		{
			max = a;
		}
	}
	return max;
}

double determine_min(FILE* infile)
{
	double a = 0.0, min = 1000000000000000000;
	while (!feof(infile))
	{
		fscanf(infile, "%lf", &a);
		if (a < min)
		{
			min = a;
		}
	}
	return min;
}/*
	Programmer: Gus Ballman
	Class: cptS 121; Lab Section 07
	Lab 05
*/

#include "Lab5.h"

int main(void)
{
	//Task 1: *************************************************
	FILE *input_stream1 = fopen("salaries.txt", "r");
	double sum = 0.0;
	char income_level = '\0';

	sum = read_calculate_sum(input_stream1);

	fclose(input_stream1);

	income_level = determine_tax_bracket(sum);

	printf("Income level is %c\n", income_level);

	//Task 2: **************************************************
	FILE* input_stream2 = fopen("data.txt", "r");
	FILE* output_stream2 = fopen("outputs.txt", "w");
	double average = 0.0;
	
	average = read_calculate_average(input_stream2);
	fprintf(output_stream2, "The average is %.4lf.", average);

	fclose(input_stream2);
	fclose(output_stream2);

	//Task 3: *************************************************
	int gcd = 0, num1 = 0, num2 = 0;

	printf("Enter an integer: ");
	scanf("%d", &num1);

	printf("Enter an integer: ");
	scanf("%d", &num2);

	gcd = greatest_common_divisor(num1, num2);
	printf("The greatest common divisor is %d.\n", gcd);

	//Task 4: *************************************************
	double max = 0.0, min = 0.0;
	FILE* input_stream3 = fopen("max_min.txt", "r");
	FILE* input_stream4 = fopen("min.txt", "r");

	max = determine_max(input_stream3);
	printf("The maximum value found in file was %.2lf\n", max);

	min = determine_min(input_stream4);
	printf("The minimum value found in file was %.2lf\n", min);

	fclose(input_stream3);
	fclose(input_stream4);

	return 0;
}12
3456
77543
244
556
7
8
996
335
467
78
7
54
7
9
97
6554The average is 6.7429.15000
10005
23456
6781229
29338
292
2
342
567
53223
123
242345
56
655
7/*
  Programmer: Gus Ballman
  Class: CptS 121; Lab Section 07
  Date: 3/24/2025
*/

#ifndef LAB6_H
#define LAB6_H

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int read_integer(FILE* infile);
int sum_digits(int n);
void if_prime(int sum);


#endif
/*
  Programmer: Gus Ballman
  Class: CptS 121; Lab Section 07
  Date: 3/24/2025
*/

#include "lab6.h"

int read_integer(FILE* infile)
{
	int a = 0;
	fscanf(infile, "%d", &a);
	return a;
}

int sum_digits(int n)
{
	int sum = 0, digit = 0;

	digit = n % 10;
	sum = sum + digit;

	while (n > digit)
	{
		n = n / 10;
		digit = n % 10;
		sum = sum + digit;
	}
	return sum;
}

void if_prime(int sum)
{
	if (sum % 2 == 0 || sum % 3 == 0 || sum % 5 == 0 || sum % 7 == 0)
	{
		printf("The sum of the integers, %d, is not prime.\n", sum);
	}
	else
	{
		printf("The sum of the integers, %d, is prime.\n", sum);
	}

}
/*
  Programmer: Gus Ballman
  Class: CptS 121; Lab Section 07
  Date: 3/24/2025
*/

#include "lab6.h"

int main(void)
{
	//Task 1:
	FILE* input_stream = NULL;
	input_stream = fopen("inputs.txt", "r");
	int sum1 = 0, sum2 = 0, a = 0, b = 0, i = 0;
	double factorial_total = 0.0, n = 0.0, fib = 0.0, fib1 = 0.0, fib2 = 1.0;

	rewind(input_stream);

	while (!feof(input_stream))
	{
		a = read_integer(input_stream);
		sum1 += a;
	}
	
	fclose(input_stream);

	sum2 = sum_digits(sum1);
	printf("%d\n", sum1);

	if_prime(sum2);

	//Task 2:
	printf("Enter the value of n for a factorial: \n");
	scanf("%lf", &n);

	if (n == 0)
	{
		printf("n! is equal to 1.\n");
	}
	else
	{
		factorial_total = n;
		while (n != 1)
		{
			n = n - 1;
			factorial_total = factorial_total * n;
		}

		printf("n! is equal to %.0lf\n", factorial_total);
	}

	//Task 3:
	printf("Enter the value for n to determine the nth term of the fibonacci sequence: \n");
	scanf("%d", &b);
	i = 1;

	while (i != b)
	{
		fib = fib1 + fib2;
		fib2 = fib1;
		fib1 = fib;
		i++;
	}

	printf("The %d term of the fibonacci sequence is %.0lf.\n", b, fib);

	//Task 4:
	srand((unsigned int)time(NULL));
	int random = 0, sign = 0, choice = 0, num_of_guesses = 0;
	
	sign = rand() % 2;
	random = rand() % 100;

	if (sign == 0)
	{
		random = -1 * random;
	}
	
	printf("Type in an integer from -100 to 100 to guess the random number.\n");

	while (choice != random)
	{
		scanf("%d", &choice);
		num_of_guesses++;

		if (choice > 100 || choice < -100)
		{
			printf("Invalid input, Try again!\n");
		}
		else if (choice > random)
		{
			printf("Guess was heigher than the random number!\n");
		}
		else if (choice < random)
		{
			printf("Guess was lower than the random number!\n");
		}
		else if (choice == random)
		{
			printf("You Guessed it!\n");
		}
	}
	printf("It took you %d guesses to guess the number!\n", num_of_guesses);


	return 0;

}
/*

*/

#include "lab9.h"

void string_reverse_pointer_notation(char *str)
{
	int size = 0;
	char first = '\0', last = '\0', temp = '\0';
	first = *str;
	while (*str != '\0')
	{
		size++;
		*str++;
	}
	last = *str - 1;
	*str = 0;
	for (int i = 0; i < size; i++)
	{
		temp = *str;
		*str = str;

	}

}

void string_reverse_array_notation(char str[], int size)
{
	char first = '\0', last = '\0', current = '\0';
	int i = 0;
	size = size - 1;
	first = str[0];
	last = str[size - 1];
	i = 1;
	while (i != (size / 2) + 1)
	{
		current = str[i];
		str[i] = str[size - i - 1];
		str[size - i -1] = current;
		i++;
	}
	str[size - 1] = first;
	str[0] = last;
}

char* my_strcpy(char destination[], const char source[])
{
	int i = 0;
	while (destination[i - 1] != '\0' || i == 0)
	{
		destination[i] = source[i];
		i++;
	}
}

char* my_strcat(char destination[], const char source[])
{
	int i = 0, size = 0, j = 0;
	while (destination[i] != '\0' || i == 0)
	{
		size++;
		i++;
	}
	size = size - 1;
	//destination[i + 1] = source[j];
	//j++;
	while (source[j] != '\0')
	{
		destination[(size + 1) + j] = source[j];
		j++;
	}
}

int my_strcmp(const char s1[], const char s2[])
{
	int i = 0;
	while (s1[i - 1] != '\0' && s2[i - 1] != '\0' || i == 0)
	{
		if (s1[i] > s2[i])
		{
			return -1;
		}
		else if (s1[i] < s2[i])
		{
			return 1;
		}
	}
	if (s1[i - 1] == s2[i - 1])
	{
		return 0;
	}
}

int my_strlen(const char s[])
{
	int i = 0, size = 0;
	while (s[i - 1] != '\0' || i == 0)
	{
		size++;
		i++;
	}
	return size - 1;
}/*

*/

#ifndef LAB9_H
#define LAB9_H

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include<string.h>

void string_reverse_array_notation(char str[], int size);
char* my_strcpy(char destination[], const char source[]);
char* my_strcat(char destination[], const char source[]);
int my_strcmp(const char s1[], const char s2[]);
int my_strlen(const char s[]);
void string_reverse_pointer_notation(char* str);

#endif/*

*/

#include "lab9.h"

int main(void)
{
	char str[20] = "CptS 121 is cool!", str2[20] = "Bike", str3[20] = "wow", str4[20] = "pig", str5[20] = "CptS 121 is cool!";
	int value = -1, size = 0;
	
	my_strcpy(str2, str3);
	printf("%s\n", str2);

	my_strcat(str3, str4);
	printf("%s\n", str3);

	value = my_strcmp(str4, str2);
	printf("%d\n", value);

	size = my_strlen(str4);
	printf("%d\n", size);

	string_reverse_array_notation(str, 18);
	printf("String: %s\n", str);

	string_reverse_pointer_notation(str5);
	printf("String: %s\n", str);

	return 0;
}